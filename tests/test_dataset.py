# -*- coding: utf-8 -*-

import logging
import pytest

import mangoes.dataset
import mangoes.utils.exceptions

logging_level = logging.WARNING
logging_format = '%(asctime)s :: %(name)s::%(funcName)s() :: %(levelname)s :: %(message)s'
logging.basicConfig(level=logging_level, format=logging_format)  # , filename="report.log")
logger = logging.getLogger(__name__)


def test_user_dataset():
    dataset = mangoes.dataset.Dataset(['a b c d', 'e f g h'], name="My dataset")

    assert {"My dataset": ['a b c d', 'e f g h']} == dataset.subsets_to_questions
    assert {'a b c d': {"/My dataset"},
            'e f g h': {"/My dataset"}} == dict(dataset.questions_to_subsets)


def test_user_dataset_with_subsets():
    dataset = mangoes.dataset.Dataset({"subset1": ['a b c d', 'e f g h'],
                                      "subset2": ['a b c d']}, name="My dataset")

    assert {"My dataset": {"subset1": ['a b c d', 'e f g h'],
                           "subset2": ['a b c d']}} == dataset.subsets_to_questions
    assert {'a b c d': {"/My dataset", "/My dataset/subset1", "/My dataset/subset2"},
            'e f g h': {"/My dataset", "/My dataset/subset1"}} == dict(dataset.questions_to_subsets)


def test_user_dataset_file(dataset_file_path):
    dataset = mangoes.dataset.Dataset(dataset_file_path, name="dataset")

    assert "dataset" == dataset.name
    assert {"dataset": ['a b c d', 'e f g h']} == dataset.subsets_to_questions
    assert {'a b c d': {"/dataset"},
            'e f g h': {"/dataset"}} == dataset.questions_to_subsets


def test_user_dataset_file_without_name(dataset_file_path):
    dataset = mangoes.dataset.Dataset(dataset_file_path)
    assert "dataset" == dataset.name
    assert {"dataset": ['a b c d', 'e f g h']} == dataset.subsets_to_questions
    assert {'a b c d': {"/dataset"},
            'e f g h': {"/dataset"}} == dataset.questions_to_subsets


def test_user_dataset_dir(dataset_dir_path):
    dataset = mangoes.dataset.Dataset(dataset_dir_path)

    assert "dataset" in dataset.name  # actual name is generated by tmpdir_factory
    assert {dataset.name: {"dataset1": ['a b c d', 'e f g h'],
                           "dataset2": ['i j k l']}} == dataset.subsets_to_questions
    assert {'a b c d': {"/{}".format(dataset.name), "/{}/dataset1".format(dataset.name)},
            'e f g h': {"/{}".format(dataset.name), "/{}/dataset1".format(dataset.name)},
            'i j k l': {"/{}".format(dataset.name),
                          "/{}/dataset2".format(dataset.name)}} == dataset.questions_to_subsets


def test_user_dataset_zip(dataset_zip_path):
    dataset = mangoes.dataset.Dataset(dataset_zip_path)

    assert "dataset" == dataset.name
    assert {"dataset": {"dataset1": ['a b c d', 'e f g h'],
                        "dataset2": ['i j k l']}} == dataset.subsets_to_questions
    assert {'a b c d': {"/dataset", "/dataset/dataset1"},
            'e f g h': {"/dataset", "/dataset/dataset1"},
            'i j k l': {"/dataset", "/dataset/dataset2"}} == dataset.questions_to_subsets


def test_ws353_has_353_questions():
    ws353 = mangoes.dataset.load("ws353")
    assert 353 == mangoes.dataset.nb_questions(ws353.subsets_to_questions)


@pytest.mark.skip
def test_simlex_has_999_questions():
    simlex_dataset = mangoes.dataset.load("simlex")
    assert 999 == mangoes.dataset.nb_questions(simlex_dataset.subsets_to_questions)


def test_google_semantic_has_8869_questions():
    google_semantic_dataset = mangoes.dataset.load("google_semantic")

    assert 8869 == mangoes.dataset.nb_questions(google_semantic_dataset.subsets_to_questions)
    assert {"capital-common-countries", "capital-world", "city-in-state", "currency",
            "family"} == set(google_semantic_dataset.subsets_to_questions["semantic"].keys())


def test_google_has_19544_questions():
    google_dataset = mangoes.dataset.load("google")
    assert 19544 == mangoes.dataset.nb_questions(google_dataset.subsets_to_questions)


def test_msr_syntactic_has_8000_questions():
    msr_dataset = mangoes.dataset.load("msr")
    assert 8000 == mangoes.dataset.nb_questions(msr_dataset.subsets_to_questions)


def test_8_8_8_dataset_has_64_questions():
    _8_8_8_dataset = mangoes.dataset.load("8-8-8")
    assert 64 == mangoes.dataset.nb_questions(_8_8_8_dataset.subsets_to_questions)


def test_wiki_sem_500_has_2812_questions():
    wikisem500_dataset = mangoes.dataset.load("wiki_sem_500")
    assert 2812 == mangoes.dataset.nb_questions(wikisem500_dataset.subsets_to_questions)


def test_outlier_detection_parse_question():
    outlier_dataset = mangoes.dataset.OutlierDetectionDataset({})
    assert ('a b c', 'c') == outlier_dataset.parse_question('a b c')


# exceptions
@pytest.mark.skip
def test_exception_add_analogy_and_similarity_datasets():
    with pytest.raises(mangoes.utils.exceptions.IncompatibleValue):
        mangoes.dataset.WS353 + mangoes.dataset.MSR


def test_exception_not_existing_dataset():
    with pytest.raises(mangoes.utils.exceptions.ResourceNotFound):
        mangoes.dataset.Dataset("not/existing/path")


# ###########################################################################################
# ### FIXTURES

@pytest.fixture
def dataset_file_path(tmpdir_factory):
    dataset_file = tmpdir_factory.mktemp('data').join('dataset.txt')
    dataset_file.write_text('a b c d\ne f g h', encoding="utf-8")
    return str(dataset_file)


@pytest.fixture
def dataset_dir_path(tmpdir_factory):
    dataset_dir = tmpdir_factory.mktemp('dataset')

    dataset_file1 = dataset_dir.join('dataset1.txt')
    dataset_file1.write_text('a b c d\ne f g h', encoding="utf-8")

    dataset_file2 = dataset_dir.join('dataset2.txt')
    dataset_file2.write_text('i j k l\n', encoding="utf-8")

    return str(dataset_dir)


@pytest.fixture
def dataset_zip_path(tmpdir_factory):
    import zipfile
    import os
    zip_filepath = os.path.join(str(tmpdir_factory.mktemp('zip')), 'dataset.zip')
    with zipfile.ZipFile(zip_filepath, "w") as zip_file:
        zip_file.writestr('dataset1.txt', 'a b c d\ne f g h')
        zip_file.writestr('dataset2.txt', 'i j k l\n')
    return zip_filepath
